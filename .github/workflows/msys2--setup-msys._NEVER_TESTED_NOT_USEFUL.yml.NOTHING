name: CI

on: [push, pull_request]

# THIS IS BASED OFF OF
# https://github.com/grimme-lab/blas-interface/blob/f31a8b67fcd36771ee3ee04f63b7ff38e81e17f9/.github/workflows/build.yml

env:
  BUILD_DIR: _build
  PIP_PACKAGES: >-
    meson==0.58.0
    cmake
    ninja
  MACOS_BASEKIT_URL: >-
    https://registrationcenter-download.intel.com/akdlm/irc_nas/17969/m_BaseKit_p_2021.3.0.3043.dmg
  MACOS_HPCKIT_URL: >-
    https://registrationcenter-download.intel.com/akdlm/irc_nas/17890/m_HPCKit_p_2021.3.0.3226_offline.dmg
  LINUX_INTEL_COMPONENTS: >-
    intel-oneapi-compiler-fortran-2021.2.0
    intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic-2021.2.0
    intel-oneapi-mkl-2021.2.0
    intel-oneapi-mkl-devel-2021.2.0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build: [meson, cmake, fpm]
        build-type: [debug]
        compiler: [gnu]
        version: [10]

        include:
        - os: macos-latest
          build: meson
          build-type: debug
          compiler: gnu
          version: 9

        - os: ubuntu-latest
          build: meson
          build-type: coverage
          compiler: gnu
          version: 10

        - os: macos-latest
          build: cmake
          build-type: debug
          compiler: gnu
          version: 10

        - os: ubuntu-latest
          build: meson
          build-type: debug
          compiler: gnu
          version: 11

        - os: ubuntu-latest
          build: meson
          build-type: debug
          compiler: intel
          version: 2021.2.0

        - os: windows-latest
          build: meson
          build-type: debug
          compiler: gnu
          shell: msys2 {0}

    defaults:
      run:
        shell: ${{ matrix.shell || 'bash' }}

    env:
      FC: ${{ matrix.compiler == 'intel' && 'ifort' || 'gfortran' }}
      CC: ${{ matrix.compiler == 'intel' && 'icc' || 'gcc' }}
      GCC_V: ${{ matrix.version }}
      PYTHON_V: 3.8

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - uses: actions/setup-python@v1
      with:
        python-version: ${{ env.PYTHON_V }}

    - name: Install GCC (OSX)
      if: ${{ contains(matrix.os, 'macos') && matrix.compiler == 'gnu' }}
      run: |
        uname -a
        echo "GCC_V: ${{ env.GCC_V }}"
        echo "PKG_CONFIG_PATH=/usr/local/opt/openblas/lib/pkgconfig" >> $GITHUB_ENV

    - name: Install GCC (Linux)
      if: ${{ contains(matrix.os, 'ubuntu') && matrix.compiler == 'gnu' }}
      run: |
        uname -a
        echo "GCC_V: ${{ env.GCC_V }}"

    - name: Install GCC (Windows)
      if: ${{ contains(matrix.os, 'windows') && matrix.compiler == 'gnu' }}
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64

    - name: Install fpm
      if: ${{ matrix.build == 'fpm' }}
      uses: fortran-lang/setup-fpm@v3
      with:
        fpm-version: 'v0.3.0'

    - name: Prepare for cache restore
      if: ${{ matrix.compiler == 'intel' }}
      run: |
        uname -a

    - name: Cache Intel install
      if: ${{ matrix.compiler == 'intel' }}
      id: cache-install
      uses: actions/cache@v2
      with:
        path: ${{ matrix.compiler }}-${{ matrix.version }}-${{ matrix.os }}.txt
        key:  ${{ matrix.compiler }}-${{ matrix.version }}-${{ matrix.os }}

    - name: Install Intel (Linux)
      if: ${{ contains(matrix.os, 'ubuntu') && contains(matrix.compiler, 'intel') && steps.cache-install.outputs.cache-hit != 'true' }}
      run: |
        echo "KEY: ${{ env.KEY }}"
        echo "PKG: ${{ env.PKG }}"
        echo NEW > ${{ matrix.compiler }}-${{ matrix.version }}-${{ matrix.os }}.txt
      env:
        KEY: GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        PKG: ${{ env.LINUX_INTEL_COMPONENTS }}

    - name: Install Intel BaseKit (OSX)
      if: ${{ contains(matrix.os, 'macos') && contains(matrix.compiler, 'intel') && steps.cache-install.outputs.cache-hit != 'true' }}
      run: |
        uname -a
        echo "OUT: ${{ env.PKG }}"
        echo "URL: ${{ env.URL }}"
        installer_exit_code=$?
      env:
        OUT: webimage-base.dmg
        URL: ${{ env.MACOS_BASEKIT_URL }}
        COMPONENTS: intel.oneapi.mac.mkl.devel

    - name: Install Intel HPCKit (OSX)
      if: ${{ contains(matrix.os, 'macos') && contains(matrix.compiler, 'intel') && steps.cache-install.outputs.cache-hit != 'true' }}
      run: |
        uname -a
        echo "OUT: ${{ env.PKG }}"
        echo "URL: ${{ env.URL }}"
        installer_exit_code=$?

    - name: Setup Intel oneAPI environment
      if: ${{ matrix.compiler == 'intel' }}
      run: |
        uname -a
        printenv >> $GITHUB_ENV

    - name: Install build and test dependencies
      if: ${{ ! contains(matrix.os, 'windows') }}
      run: |
        echo "PIP_PACKAGES ${{ env.PIP_PACKAGES }} PIP_EXTRAS ${{ env.PIP_EXTRAS }}"

    - name: Configure build (meson)
      if: ${{ matrix.build == 'meson' }}
      run: |
        uname -a
        echo "BUILD_DIR: ${{ env.BUILD_DIR }}"
        echo "COVERAGE ${{ env.COVERAGE }}"
        echo "MESON_ARGS: ${{ env.MESON_ARGS }}"
      env:
        COVERAGE: ${{ matrix.build-type == 'coverage' }}
        MESON_ARGS: >-
          ${{ contains(matrix.os, 'macos') && '-Dlapack=openblas' || '' }}
          ${{ contains(matrix.os, 'windows') && '-Dfortran_link_args=-Wl,--allow-multiple-definition' || '' }}

    - name: Configure build (CMake)
      if: ${{ matrix.build == 'cmake' }}
      run: |
        uname -a
        echo "BUILD_DIR: {{ env.BUILD_DIR }}"
        echo "PWD: $PWD"

    - name: Build library (fpm)
      if: ${{ matrix.build == 'fpm' }}
      run: |
        uname -a

    - name: Build library
      if: ${{ matrix.build != 'fpm' }}
      run: |
        uname -a

    - name: Install project
      if: ${{ matrix.build != 'fpm' }}
      run: |
        uname -a
        echo "BUILD_DIR: {{ env.BUILD_DIR }}"