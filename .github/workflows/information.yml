
name: Information
# env:
#   # Enabling runner diagnostic logging
#   ACTIONS_RUNNER_DEBUG: true
#   # Enabling step debug logging
#   ACTIONS_STEP_DEBUG: true


on: [push, pull_request]

jobs:

  information_ubuntu_latest:
    name: Ubuntu Knowledge About everything
    runs-on: ubuntu-latest
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        include:

          - pg: REL_16_BETA2
            Configuration: Debug
            Platform: x64
            os: windows-latest
            rversion: 4.3.1
            compiler: mingw64
            builder: make

          - pg: REL_16_BETA2
            Configuration: Debug
            Platform: x64
            os: windows-latest
            rversion: 4.3.1
            compiler: mingw64
            builder: meson

    steps:
      - name: Ubuntu Debugging Force
        shell: bash
        run:
          set -x -v -e;
          pwd;
          echo ${GITHUB_WORKSPACE};
          echo Hello > Hello.txt;
          ls -alrt;
          cat Hello.txt;
          export;
          cd /;
          pwd;
          ls -alrt;
          echo "VARA=vara" >> $GITHUB_ENV;
          echo "VARB=varb" >> $GITHUB_ENV;
          echo "$MATRIX"
        env:
          MATRIX: ${{ toJSON(matrix) }}

      - name: Ubuntu Dump github context global data
        shell: bash
        run: |
          set -x -v -e
          pwd
          ls -alrt
          echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Ubuntu Dump runner context global data
        shell: bash
        run: echo "$RUNNER_CONTEXT"
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}

      - name: Ubuntu Dump secrets
        shell: bash
        run: |
          echo "$SECRETS"
        env:
          SECRETS: ${{ toJSON(secrets) }}

      - name: Ubuntu Dump .Env vars
        shell: bash
        run: |
          echo "$VARS"
        env:
          VARS: ${{ toJSON(vars) }}


  debug_powershell:
    name: Debugging Powershell
    runs-on: windows-latest
    steps:
      - name: Windows Poweshell echo test
        run: |
          Start-Transcript -Path ran.txt -IncludeInvocationHeader
          Set-PSDebug -Trace 2

          dir
          pwd
          echo "${env:GITHUB_WORKSPACE}"
          dir
          pwd
          dir
          echo "$(pwd)"
          echo "$(dir)"
          cd "C:\"
          pwd
          dir
          echo "$(pwd)"
          echo "$(dir)"

          Get-Content -Path "${env:GITHUB_WORKSPACE}\ran.txt"
          Stop-Transcript
          Set-PSDebug -Trace 0

  information_windows_latest:
    name: Windows Knowledge About everything
    runs-on: windows-latest

    steps:

      - name: Windows Powershell add Functions
        if: matrix.os == 'windows-latest'
        run: |
          Add-Content -Path $profile -Value "function Set-EnvVar {param(`$X)     Add-Content -Path `${env:GITHUB_ENV} -Value `"`$X`"}"
          Add-Content -Path $profile -Value "function Start-App  {param(`$X,`$Y) Start-Process -NoNewWindow -FilePath `"`$X`" -ArgumentList `$Y }"

      - name: Windows Dump github env global data
        shell: cmd
        run: |
          echo on
          echo Hi
          echo Hello > Hello.txt
          rem does not work
          rem setx GREETING Hello /m
          type Hello.txt
          echo %CD%
          cd "C:\"
          echo %CD%
          printf "VARA=vara" >> %GITHUB_ENV%
          printf "VARB=varb" >> %GITHUB_ENV%

      - name: Windows Powershell Dump github env global data
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          Set-EnvVar "VARAPOWERA=varapowera"
          Set-EnvVar "VARAPOWERB=varapowerb"

      - name: Windows Dump github context global data
        shell: cmd
        run: |
          echo on
          echo %CD%
          rem does not work
          echo GREETING %GREETING%
          echo %GITHUB_CONTEXT%
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Windows Dump runner context global data
        shell: cmd
        run: echo %RUNNER_CONTEXT%
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}

      - name: Windows Dump secrets
        shell: cmd
        run: echo %SECRETS%
        env:
          SECRETS: ${{ toJSON(secrets) }}

      - name: Windows Dump env. vars
        shell: cmd
        run: |
          echo %VARS%
          echo VARA value is %VARA%
          echo VARB value is %VARB%
          echo VARAPOWERA value is %VARAPOWERA%
          echo VARAPOWERB value is %VARAPOWERA%
        env:
          VARS: ${{ toJSON(vars) }}


  information_macos_latest:
    name: MacOS Knowledge About everything
    runs-on: macos-latest
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        include:

          - pg: REL_16_BETA2
            Configuration: Debug
            Platform: x64
            os: windows-latest
            rversion: 4.3.1
            compiler: mingw64
            builder: make

          - pg: REL_16_BETA2
            Configuration: Debug
            Platform: x64
            os: windows-latest
            rversion: 4.3.1
            compiler: mingw64
            builder: meson

    steps:
      - name: MacOS Dump github env global data
        shell: bash
        run: |
          set -x -v -e
          pwd
          export
          cd /
          pwd
          echo "VARA=vara" >> $GITHUB_ENV
          echo "VARB=varb" >> $GITHUB_ENV

      - name: MacOS Dump github context global data
        shell: bash
        run: |
          set -x -v -e
          pwd
          echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: MacOS Dump runner context global data
        shell: bash
        run: |
          echo "$RUNNER_CONTEXT"
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}

      - name: MacOS Dump secrets
        shell: bash
        run: |
          echo "$SECRETS"

        env:
          SECRETS: ${{ toJSON(secrets) }}

      - name: MacOS Dump .Env vars
        shell: bash
        run: |
          echo "$VARS"
          echo VARA value is ${VARA}
          echo VARB value is ${VARB}
          echo "$MATRIX"
        env:
          VARS: ${{ toJSON(vars) }}
          MATRIX: (matrix)
